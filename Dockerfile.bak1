FROM nvidia/cuda:11.6.2-runtime-ubuntu20.04

# Install base utilities
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        wget \
        ninja-build \
        unzip \
        libgl-dev \
        ffmpeg \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Miniconda (cleanup installer to reduce layer size)
ENV CONDA_DIR=/opt/conda
RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh \
    && /bin/bash /tmp/miniconda.sh -b -p /opt/conda \
    && rm -f /tmp/miniconda.sh

# Put conda in path so we can use conda activate
ENV PATH=$CONDA_DIR/bin:$PATH

WORKDIR /root/gaussian_splatting
COPY ./ ./

# Limit to architectures supported by PyTorch 1.12/CUDA 11.6 toolchain
# Avoid unknown arch errors during extension builds (e.g., 8.9, 9.0+PTX)
ENV TORCH_CUDA_ARCH_LIST="6.0;6.1;7.0;7.5;8.0;8.6"

ENV PIP_NO_CACHE_DIR=1

# Accept Anaconda TOS and create env with libmamba solver, then clean caches
RUN conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main \
    && conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/r \
    && conda update -n base -y conda \
    && conda install -n base -y conda-libmamba-solver \
    && conda config --set solver libmamba \
    && conda create -n gaussian_splatting -y python=3.7.13 pip=22.3.1 \
    && conda install -n gaussian_splatting -y -c pytorch -c conda-forge -c defaults \
        pytorch=1.12.1 torchvision=0.13.1 torchaudio=0.12.1 cudatoolkit=11.6 plyfile tqdm \
    && conda clean -afy

RUN conda init bash
SHELL ["conda", "run", "-n", "gaussian_splatting", "/bin/bash", "-c"]

# Python deps (no cache) and local CUDA extensions
RUN pip install --no-cache-dir -U pip setuptools wheel \
    && pip install --no-cache-dir -e ./submodules/diff-gaussian-rasterization \
    && pip install --no-cache-dir -e ./submodules/simple-knn \
    && pip install --no-cache-dir -e ./submodules/fused-ssim \
    && pip install --no-cache-dir opencv-python joblib \
    && (conda install -y -c conda-forge 'colmap=3.8=gpu*' \
      || conda install -y -c conda-forge colmap \
       ) \
    && conda remove -y ffmpeg \
    && pip cache purge || true \
    && conda clean -afy \
    && rm -rf /root/.cache

ENTRYPOINT ["conda", "run", "--no-capture-output", "-n", "gaussian_splatting"]
CMD ["bash"]